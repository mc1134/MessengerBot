{ type: 'fb',
  botkit: 
   { events: 
      { spawned: [Object],
        heard_trigger: [Object],
        command_triggered: [Object],
        remote_command_end: [Object],
        webserver_up: [Object],
        facebook_optin: [Object],
        message_received: [Object],
        sticker_received: [Object],
        image_received: [Object],
        audio_received: [Object],
        conversationStarted: [Object],
        facebook_postback: [Object] },
     config: 
      { verify_token: 'XDHACKS2017WEMADEAmessengerBOT',
        access_token: 'EAAS2KmnYBdUBALWBZBFjFDLn49JhSfgrHHk1HTwPf92E6BxJa2QceCZBBB2WNsbWq6PF8RfsIheN60cVzfGfE99Jr5pf6yeWrSEILZBf930Ifcc3ZC00bNcumSC2qyn2ZC1CCgI4VWN3nRe07rKULV3Y31stpLClcd7jzWa7IIowxaS1dcgoq',
        studio_token: 'yh8Z4KBHY0wKOclPjqTYbBUecCQs5GpPQfB7NzkNfmB6erhJ7YyTcx7Xppog528l',
        studio_command_uri: undefined,
        hostname: '0.0.0.0',
        logLevel: 'info' },
     tasks: [ [Object] ],
     taskCount: 1,
     convoCount: 1,
     my_version: '0.6.4',
     my_user_agent: null,
     memory_store: { users: {}, channels: {}, teams: {} },
     utterances: 
      { yes: /^(yes|yea|yup|yep|ya|sure|ok|y|yeah|yah)/i,
        no: /^(no|nah|nope|n)/i,
        quit: /^(quit|cancel|end|stop|done|exit|nevermind|never mind)/i },
     middleware: 
      { spawn: [Object],
        ingest: [Object],
        normalize: [Object],
        categorize: [Object],
        receive: [Object],
        heard: [Object],
        capture: [Object],
        format: [Object],
        send: [Object] },
     ingest: [Function],
     normalize: [Function],
     categorize: [Function],
     receiveMessage: [Function],
     storage: { teams: [Object], users: [Object], channels: [Object] },
     hears_regexp: [Function],
     changeEars: [Function],
     hears: [Function],
     on: [Function],
     trigger: [Function],
     startConversation: [Function],
     createConversation: [Function],
     defineBot: [Function],
     spawn: [Function],
     startTicking: [Function],
     shutdown: [Function],
     startTask: [Function],
     tick: [Function],
     setupWebserver: [Function],
     worker: [Function],
     userAgent: [Function],
     version: [Function],
     logger: { log: [Function: log] },
     log: 
      { [Function]
        emergency: [Function: bound log],
        alert: [Function: bound log],
        critical: [Function: bound log],
        error: [Function: bound log],
        warning: [Function: bound log],
        notice: [Function: bound log],
        info: [Function: bound log],
        debug: [Function: bound log] },
     debug: [Function: bound log],
     hears_test: [Function],
     studio: 
      { evaluateTrigger: [Function],
        getScript: [Function],
        validate: [Function],
        beforeThread: [Function],
        before: [Function],
        after: [Function],
        run: [Function],
        get: [Function],
        runTrigger: [Function],
        testTrigger: [Function],
        compileScript: [Function] },
     createWebhookEndpoints: [Function],
     handleWebhookPayload: [Function],
     api: 
      { messenger_profile: [Object],
        thread_settings: [Object],
        attachment_upload: [Object],
        nlp: [Object],
        tags: [Object] },
     tickInterval: 
      Timeout {
        _called: true,
        _idleTimeout: 1500,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 9931,
        _onTimeout: [Function],
        _timerArgs: undefined,
        _repeat: 1500 },
     registerDeployWithStudio: [Function],
     webserver: 
      { [Function: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function: lazyrouter],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function: listen],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 1,
        locals: [Object],
        mountpath: '/',
        _router: [Object] } },
  config: {},
  utterances: 
   { yes: /^(yes|yea|yup|yep|ya|sure|ok|y|yeah|yah)/i,
     no: /^(no|nah|nope|n)/i,
     quit: /^(quit|cancel|end|stop|done|exit|nevermind|never mind)/i },
  send: [Function],
  startTyping: [Function],
  stopTyping: [Function],
  replyWithTyping: [Function],
  reply: [Function],
  findConversation: [Function],
  say: [Function],
  startConversation: [Function],
  createConversation: [Function] }